/**
     * Decrypt a salted msg using a password.
     * Inspired by https://github.com/adonespitogo
     */
    var keySize = 256;
    var iterations = 1000;
    function decrypt (encryptedMsg, pass) {
        var salt = CryptoJS.enc.Hex.parse(encryptedMsg.substr(0, 32));
        var iv = CryptoJS.enc.Hex.parse(encryptedMsg.substr(32, 32))
        var encrypted = encryptedMsg.substring(64);

        var key = CryptoJS.PBKDF2(pass, salt, {
            keySize: keySize/32,
            iterations: iterations
        });

        var decrypted = CryptoJS.AES.decrypt(encrypted, key, {
            iv: iv,
            padding: CryptoJS.pad.Pkcs7,
            mode: CryptoJS.mode.CBC
        }).toString(CryptoJS.enc.Utf8);
        return decrypted;
    }

    document.getElementById('staticrypt-form').addEventListener('submit', function(e) {
        e.preventDefault();

        var passphrase = document.getElementById('staticrypt-password').value,
            encryptedMsg = '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',
            encryptedHMAC = encryptedMsg.substring(0, 64),
            encryptedHTML = encryptedMsg.substring(64),
            decryptedHMAC = CryptoJS.HmacSHA256(encryptedHTML, CryptoJS.SHA256(passphrase).toString()).toString();

        if (decryptedHMAC !== encryptedHMAC) {
            alert('Bad password!');
            return;
        }

        var plainHTML = decrypt(encryptedHTML, passphrase);

        document.write(plainHTML);
        document.close();
    });